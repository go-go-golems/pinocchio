package components

import (
    "time"
    "encoding/json"
)

type EventData struct {
    Timestamp time.Time
    Message   string
    Text     string
    Name     string
    Input    interface{}
    Result   interface{}
    Error    string
}

templ EventUser(timestamp time.Time, message string) {
    <div class="event">
        <div class="timestamp">{timestamp.Format("15:04:05")}</div>
        <div class="user-message">
            <strong>User:</strong> {message}
        </div>
    </div>
}

templ EventFinal(timestamp time.Time, text string) {
    <div class="event">
        <div class="timestamp">{timestamp.Format("15:04:05")}</div>
        <div class="assistant-message">
            <strong>Assistant:</strong> {text}
        </div>
    </div>
}

templ EventToolUse(timestamp time.Time, name string, input interface{}) {
    <div class="event">
        <div class="timestamp">{timestamp.Format("15:04:05")}</div>
        <div class="tool-call">
            <strong>Tool Call:</strong> {name}
            <pre>{toJSON(input)}</pre>
        </div>
    </div>
}

templ EventToolResult(timestamp time.Time, result interface{}) {
    <div class="event">
        <div class="timestamp">{timestamp.Format("15:04:05")}</div>
        <div class="tool-result">
            <strong>Tool Result:</strong>
            <pre>{toJSON(result)}</pre>
        </div>
    </div>
}

templ EventError(timestamp time.Time, err string) {
    <div class="event">
        <div class="timestamp">{timestamp.Format("15:04:05")}</div>
        <div class="error">
            <strong>Error:</strong> {err}
        </div>
    </div>
}

func toJSON(v interface{}) string {
    b, err := json.MarshalIndent(v, "", "  ")
    if err != nil {
        return err.Error()
    }
    return string(b)
} 