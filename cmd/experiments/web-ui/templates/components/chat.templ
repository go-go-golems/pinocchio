package components

import (
    "github.com/go-go-golems/pinocchio/cmd/experiments/web-ui/conversation"
)

templ ChatContainer(clientID string, messages *conversation.WebConversation) {
    <div class="event-container">
        <div id="events" 
             hx-ext="sse" 
             sse-connect={"/events?client_id=" + clientID}>
            <div id="messages">
                if messages != nil {
                    @ConversationHistory(messages)
                }
            </div>
        </div>
    </div>
    @ChatInput(clientID)
}

templ ChatInput(clientID string) {
    <div class="chat-input mt-3">
        <form hx-post="/chat" 
              hx-target="#messages" 
              hx-swap="beforeend"
              class="d-flex gap-2">
            <input type="hidden" name="client_id" value={clientID}/>
            <input type="text" 
                   name="message" 
                   class="form-control" 
                   placeholder="Type your message..."
                   required/>
            <button type="submit" class="btn btn-primary">Send</button>
        </form>
    </div>
}

templ ConversationHistory(messages *conversation.WebConversation) {
    for _, msg := range messages.Messages {
        if msg.Type == "chat" {
            if chatMsg, ok := msg.Content.(*conversation.WebChatMessage); ok {
                if chatMsg.Role == "user" {
                    @EventUser(msg.Time, chatMsg.Text)
                } else {
                    @EventFinal(msg.Time, chatMsg.Text)
                }
            }
        } else if msg.Type == "tool-use" {
            if toolMsg, ok := msg.Content.(*conversation.WebToolUseMessage); ok {
                @EventToolUse(msg.Time, toolMsg.Name, toolMsg.Input)
            }
        } else if msg.Type == "tool-result" {
            if toolMsg, ok := msg.Content.(*conversation.WebToolResultMessage); ok {
                @EventToolResult(msg.Time, toolMsg.Result)
            }
        }
    }
}

templ MessageContainer(msg *conversation.WebMessage) {
    <div class="message-group">
        if msg.Type == "chat" {
            if chatMsg, ok := msg.Content.(*conversation.WebChatMessage); ok {
                @EventUser(msg.Time, chatMsg.Text)
            }
        }
        <div class="assistant-response" sse-swap="message"></div>
    </div>
} 